using System.Diagnostics.CodeAnalysis;
using System.Text;
using PMart.Enumeration.Generator.Models;

namespace PMart.Enumeration.Generator.Helpers;

/// <summary>
/// The source code builder.
/// </summary>
[ExcludeFromCodeCoverage]
internal static class SourceGenerationBuilder
{
    private const string EnumerationFullyQualifiedName = "global::PMart.Enumeration.Enumeration";
    private const string EnumerationDynamicFullyQualifiedName = "global::PMart.Enumeration.EnumerationDynamic";
    private const string GeneratedCodeAttributeFullyQualifiedName = "global::System.CodeDom.Compiler.GeneratedCodeAttribute";
    
    /// <summary>
    /// Generates the source code for the Enumeration class.
    /// </summary>
    /// <param name="enumerationToGenerate">The Enumeration to generate.</param>
    /// <returns>The source code.</returns>
    public static string GenerateEnumerationClass(EnumerationToGenerate enumerationToGenerate)
    {
        var hasNamespace = !string.IsNullOrEmpty(enumerationToGenerate.Namespace);
        var fullyQualifiedName = BuildFullyQualifiedName(enumerationToGenerate, hasNamespace);
        var generatedCodeAttribute = BuildGeneratedCodeAttribute();

        var sb = new StringBuilder();

        sb.Append(
            """
            // <auto-generated>
            //     This code was generated by the PMart.Enumeration.Generator source generator.
            // </auto-generated>


            """);
        
        sb.Append(
            """
            #nullable enable


            """);

        if (hasNamespace)
        {
            sb.Append("namespace ").Append(enumerationToGenerate.Namespace).Append(
                """

                {

                """);
        }

        sb.Append("    ").Append(enumerationToGenerate.AccessibilityLevel).Append(" partial class ").Append(enumerationToGenerate.Name).Append(" : ").Append(enumerationToGenerate.IsDynamic ? EnumerationDynamicFullyQualifiedName : EnumerationFullyQualifiedName).Append("<").Append(fullyQualifiedName).Append(">").Append(
            """

                {
            """);

        foreach (var member in enumerationToGenerate.Members ?? [])
        {
            sb.Append(generatedCodeAttribute);

            sb.Append(
                    """

                            public static readonly 
                    """).Append(fullyQualifiedName).Append(" ").Append(member.Key).Append(" = new ").Append(fullyQualifiedName).Append("(").Append(member.Value).Append("!);").Append(
                    """


                    """);
        }

        if (enumerationToGenerate.IsDynamic)
        {
            sb.Append(generatedCodeAttribute);
            
            sb.Append(
                """

                        public 
                """).Append(enumerationToGenerate.Name).Append("()").Append(
                """

                        {
                        }

                """);
        }
        
        sb.Append(generatedCodeAttribute);

        sb.Append(
            """

                    private 
            """).Append(enumerationToGenerate.Name).Append("(string value) : base(value)").Append(
            """

                    {
                    }
                }
            """);
        
        if (hasNamespace)
        {
            sb.Append(
                """

                }
                """);
        }

        return sb.ToString();
    }

    private static string BuildFullyQualifiedName(EnumerationToGenerate enumerationToGenerate, bool hasNamespace)
    {
        var fullyQualifiedNameStringBuilder = new StringBuilder();
        
        fullyQualifiedNameStringBuilder.Append("global::");

        if (hasNamespace)
        {
            fullyQualifiedNameStringBuilder.Append(enumerationToGenerate.Namespace).Append(".");
        }
        
        fullyQualifiedNameStringBuilder.Append(enumerationToGenerate.Name);
        
        return fullyQualifiedNameStringBuilder.ToString();
    }
    
    private static string BuildGeneratedCodeAttribute()
    {
        var generatorNamespace = typeof(EnumerationGenerator).Namespace;
        var assemblyVersion = typeof(EnumerationGenerator).Assembly.GetName().Version.ToString();
        
        var generatedCodeAttributeStringBuilder = new StringBuilder();
        
        generatedCodeAttributeStringBuilder.Append(
            """
            
                    [
            """).Append(GeneratedCodeAttributeFullyQualifiedName).Append("(\"").Append(generatorNamespace).Append("\", \"").Append(assemblyVersion).Append("\")]");
        
        return generatedCodeAttributeStringBuilder.ToString();
    }
}